首先把自己当成一个初学者，然后慢慢看，尽量别跳过
1.1
一个函数的定义包含四个部分：返回类型，函数名，形参列表，函数体

返回类型  函数名  形参列表
  int      main  (int argc, char**argv)
{                                                  //函                 
	std::cout << "hello world!!" << std::endl;     //数
	return 0;                                      //体
}

函数返回类型：可以是int，char 等基本类型，也可以无类型（void）,也可以是自定义的类型
struct enum class
函数名：一般用英语单词表示，最好别用拼音。
新参列表:该函数在函数体内能够直接使用的变量。
1.如果希望形参参与计算后的值能够带出函数，那么可以采用地址/引用的方式来定义形参
int func(char* name) / int func(std::string &name)
2.在定义函数的时候如果不希望形参的值被改变，可以加上const修饰
int func(const char ch)
3.函数声明和函数定义
函数声明包含：返回类型，函数名，形参列表
函数定义包含：返回类型，函数名，形参列表，函数体

1.2 初识输入输出
标准输入输出
输入：std::cin
输出：std::cout
标准错误：std::cerr
一般性日志：std::clog


1.3 注释
方式： 
双斜线注释：  //  
注释界定符对：/**/
程序中通常同时包含两种形式的注释。注释界定符对通常用于多行解释，而双斜线注释常用于
半行和单行附注

个人关于注释的看法:
1.避免过量注释，尽量能够通过函数名就能知道函数的作用，通过变量名就能知道其作用
避免对函数功能和变量作用的单独注释。能够一眼看懂的地方不需要注释，写完代码后隔个
几天再看发现有些地方需要仔细回忆才能明白的，这种地方一定要加上注释。
关键流程，关键步骤加上注释。
2.通常工作中，公司对这方面有要求，按照公司要求来就行，或者从接手的代码中查看前人
的注释风格，保持和前人的注释风格一致就行。
3.如果前人没有注释风格，注释完全凭心情的话，最起码同一个文件的注释风格要一致。
4.如果是新项目，那么注释风格看自己了。
//

1.4控制流
while  do while for
格式：
while(条件)
{}
do
{}while(条件)

while：先判断条件然后再执行
do...while():先执行后判断条件
for(int i = 0; i < 10; i++):先判断条件然后在执行

1.5 类简介
在C++中我们通过定义一个类来定义自己的数据结构。
一个类定义了一个类型，以及与其关联的一组操作。
类是一个自定义的类型。
类和对象的关系：
大白话：
对象就是通过类定义出来的一个个的变量。
术语：
类是对象的抽象，而对象是类的具体实例。
对象是类的实例，类是对象的模板。

成员函数：
类中定义的那些操作。